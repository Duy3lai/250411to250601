{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNKJCC+VusrcONcjqh1sXkc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"2Tuc1iVtRe_y"},"outputs":[],"source":["import numpy as np\n","\n","\n","def generate_loads(n):\n","  return np.random.uniform(1, 10, n)\n","\n","def generate_distances(n):\n","  return np.random.uniform(0.1, 0.5, n)\n","\n","def compute_stress(loads, distances):\n","  return loads * distances\n","\n","def stress_variance(stress):\n","  return np.var(stress)\n","\n","# Use functions like tools\n","loads = generate_loads(5)\n","distances = generate_distances(5)\n","stress = compute_stress(loads, distances)\n","var = stress_variance(stress)\n","\n","\n","#----------Flexible parameters---------------\n","\n","def log_parameters(*args, **kwargs):\n","  print(\"Positional:\", args)\n","  print(\"Keyword:\", kwargs)\n","\n","log_parameters(1,2,3, load=5, distance = 10) #Nope I don't get what it is for and what args and keyword args are. Explain like im five\n","\n","#------------Object-Oriented Programming (OOP)---------------------\n","class LoadOptimizer:\n","  def __init__(self, loads, distances):\n","    self.loads = np.array(loads)\n","    self.distances = np.array(distances) #Nahh what is self, class for, and __init__. Explain like im five again please\n","\n","  def compute_stress(self):\n","    return self.loads * self.distances\n","\n","  def stress_variance(self):\n","    return np.var(self.compute_stress())\n","\n","opt = LoadOptimizer([5, 3, 7], [0.2, 0.4, 0.3])\n","print(opt.stress_variance) #WTF I DONT GET IT HELP WHY I NEED CLASS AND WHAT IS 5,3,7 and 0.2,0.4,....\n","\n","\n","#--------------Try/expect-----------\n","class SafeLoadOptimizer:\n","  def __init__(self, loads, distances):\n","    self.loads = np.array(loads)\n","    self.distances = np.array(distances)\n","\n","  def compute_stress(self):\n","    try:\n","      return self.loads * self.distances\n","    except Expection as e: #Huh??? expection what\n","      print(f\"Error computing stress: {e}\")\n","      return np.zeros_like(self.loads) #What is zeros like\n","\n","\n","\n","#-------------- Context Managers (with)---------------\n","with open(\"data.txt\", \"r\") as file:\n","  data = file.read() #what is \"r\" and what is as file and what is with func and what is this for\n","\n","\n","class CustomManager:\n","  def __enter__(self): #Why do you have to use __somerandomstuff__ so much?!?\n","    print(\"Entered context\")\n","    return self\n","\n","  def __exit__(self, exc_type, exc_val, exc_tb):\n","    print(\"Exciting context\")\n","\n","with CustomManager():\n","  print(\"Inside block\")\n"]},{"cell_type":"code","source":["MATERIAL_DATABASE = {\n","    \"steel\": 250,\n","    \"aluminium\": 150,\n","    \"carbon_fiber\": 400,\n","}\n","\n","class Beam:\n","  def __init__(self, loads, distances, material):\n","    self.loads = loads\n","    self.distances = distances\n","    self.material = material\n","    self.material_limit = MATERIAL_DATABASE[material]\n","    self.failures = []\n","    self.is_failed = False\n","\n","  def compute_stress(self):\n","    return [l * d for l, d in zip(self.loads, self.distances)]\n","\n","  def compute_safety_factors(self):\n","    stress = self.compute_stress()\n","    return [s / self.material_limit for s in stress]\n","\n","  def check_failure(self):\n","    safety_factors = self.compute_safety_factors()\n","    if any(sf > 1.0 for sf in safety_factors):\n","      self.is_failed = True\n","      self.failures.append(\"Overstress at one or more points\")\n","    return self.is_failed #Why don't you return failures\n","\n","  def repair(self):\n","    self.is_failed = False\n","    self.failures.append(\"Beam repaired and reset.\")\n","\n","  def summary(self):\n","    return {\n","        \"Material\": self.material,\n","        \"Stress\": self.compute_stress(),\n","        \"Safe?\": not self.is_failed,\n","        \"Failures\": self.failures\n","    }\n","\n","beam1 = Beam([9000, 100], [0.5, 0.2], material = \"aluminium\") #So Beam([]) is always for the __init__ right? anything below is any for the logic that runs afterwards???\n","beam1.check_failure()\n","\n","print(beam1.summary())\n","\n","beam1.repair()\n","\n","print(beam1.summary())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VbYSSJdAS_D2","executionInfo":{"status":"ok","timestamp":1748766289634,"user_tz":-420,"elapsed":5,"user":{"displayName":"Duy Nguyễn Trương Bảo","userId":"18053593021551728895"}},"outputId":"fba29ba2-b3c6-4e9f-f3ab-13984be03112"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Material': 'aluminium', 'Stress': [4500.0, 20.0], 'Safe?': False, 'Failures': ['Overstress at one or more points']}\n","{'Material': 'aluminium', 'Stress': [4500.0, 20.0], 'Safe?': True, 'Failures': ['Overstress at one or more points', 'Beam repaired and reset.']}\n"]}]},{"cell_type":"code","source":["def add(a,b):\n","  return a + b\n","\n","print(add(5,3))\n","\n","addLambda = lambda x, y: x + y\n","print(addLambda(3,7))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lzs16UqPmH2q","executionInfo":{"status":"ok","timestamp":1748766605179,"user_tz":-420,"elapsed":4,"user":{"displayName":"Duy Nguyễn Trương Bảo","userId":"18053593021551728895"}},"outputId":"d84a2801-6c21-4293-8f17-c6ea7f6ed2a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8\n","10\n"]}]}]}